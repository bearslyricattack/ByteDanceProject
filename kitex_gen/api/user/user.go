// Code generated by Kitex v0.7.1. DO NOT EDIT.

package user

import (
	"context"
	api "douyin/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "User"
	handlerType := (*api.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"register": kitex.NewMethodInfo(registerHandler, newUserRegisterArgs, newUserRegisterResult, false),
		"login":    kitex.NewMethodInfo(loginHandler, newUserLoginArgs, newUserLoginResult, false),
		"get":      kitex.NewMethodInfo(getHandler, newUserGetArgs, newUserGetResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "api",
		"ServiceFilePath": "user.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserRegisterArgs)
	realResult := result.(*api.UserRegisterResult)
	success, err := handler.(api.User).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRegisterArgs() interface{} {
	return api.NewUserRegisterArgs()
}

func newUserRegisterResult() interface{} {
	return api.NewUserRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserLoginArgs)
	realResult := result.(*api.UserLoginResult)
	success, err := handler.(api.User).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserLoginArgs() interface{} {
	return api.NewUserLoginArgs()
}

func newUserLoginResult() interface{} {
	return api.NewUserLoginResult()
}

func getHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserGetArgs)
	realResult := result.(*api.UserGetResult)
	success, err := handler.(api.User).Get(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetArgs() interface{} {
	return api.NewUserGetArgs()
}

func newUserGetResult() interface{} {
	return api.NewUserGetResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *api.RegisterRequest) (r *api.RegisterResponse, err error) {
	var _args api.UserRegisterArgs
	_args.Req = req
	var _result api.UserRegisterResult
	if err = p.c.Call(ctx, "register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *api.LoginRequest) (r *api.LoginResponse, err error) {
	var _args api.UserLoginArgs
	_args.Req = req
	var _result api.UserLoginResult
	if err = p.c.Call(ctx, "login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Get(ctx context.Context, req *api.GetInfoRequest) (r *api.GetInfoResponse, err error) {
	var _args api.UserGetArgs
	_args.Req = req
	var _result api.UserGetResult
	if err = p.c.Call(ctx, "get", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
